[build-system]
requires = [ "poetry-core" ]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "audio-metadata"
description = "A library for reading and, in the future, writing metadata from audio files."
version = "0.11.1"

license = "MIT"

authors = ["thebigmunch <mail@thebigmunch.me>"]

readme = "README.md"

repository = "https://github.com/thebigmunch/audio-metadata"
homepage = "https://github.com/thebigmunch/audio-metadata"

[tool.poetry.dependencies]
python = "^3.6"

attrs = ">=18.2"
bidict = "0.*"
bitstruct = ">=6.0,<9.0"
more-itertools = ">=4.0,<9.0"
pendulum = ">=2.0,<=3.0,!=2.0.5,!=2.1.0"  # Work around https://github.com/sdispater/pendulum/issues/454
pprintpp = "0.*"
tbm-utils = "^2.3"
wrapt = "^1.0"

coverage = { version = ">=5.0,<6.0", optional = true, extras = [ "toml" ] }
flake8 = { version = "^3.5", optional = true }
flake8-builtins = { version = "^1.0", optional = true }
flake8-comprehensions = { version = ">=2.0,<=4.0", optional = true }
flake8-import-order = { version = "^0.18", optional = true }
flake8-import-order-tbm = { version = "^1.0", optional = true }
furo = { version = "*", optional = true, allow-prereleases = true }
myst-parser = { version = ">=0.12", optional = true }
nox = { version = ">=2019", optional = true }
sphinx = { version = "^3.0", optional = true }
ward = { version = ">=0.42.0-beta.0", optional = true }

[tool.poetry.extras]
dev = [
	"coverage",
	"flake8",
	"flake8-builtins",
	"flake8-comprehensions",
	"flake8-import-order",
	"flake8-import-order-tbm",
	"furo",
	"myst-parser",
	"nox",
	"sphinx",
	"ward",
]
doc = [
	"furo",
	"myst-parser",
	"sphinx",
]
lint = [
	"flake8",
	"flake8-builtins",
	"flake8-comprehensions",
	"flake8-import-order",
	"flake8-import-order-tbm",
]
test = [
	"coverage",
	"nox",
	"ward",
]


[tool.coverage.run]
branch = true
source = [
	"audio_metadata",
	"tests",
]

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
	"__all__",
	"import",
	"except ImportError:",
	"pass",
	"# pragma: nocover",
	"# pragma: no cover",
	"# pragma: nobranch",
	"# pragma: no branch",
]


[tool.interrogate]
fail-under = 100
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-private = true
ignore-semiprivate = true
exclude = [
	"src/audio_metadata/__about__.py",
]


[tool.ward]
path = [ "tests" ]
